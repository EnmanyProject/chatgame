// Ï±ÑÌåÖ API - Ïú§ÏïÑÏôÄÏùò ÎåÄÌôî Ï≤òÎ¶¨
const DATABASE_DATA = {
  "character": {
    "name": "Ïú§ÏïÑ",
    "age": 20,
    "personality": ["Î∞ùÏùå", "Ï†ÅÍ∑πÏ†Å", "ÏàúÏàòÌï®", "Í∞êÏ†ï ÌëúÌòÑ ÌíçÎ∂Ä"],
    "relationship": "Ï∞ΩÏö© Ïò§Îπ†Î•º 1ÎÖÑ ÎÑòÍ≤å Ï¢ãÏïÑÌïòÎäî ÌõÑÎ∞∞",
    "speech_style": ["Î∞òÎßê", "ÏπúÍ∑ºÌïòÍ≥† Ïï†ÍµêÏä§ÎüΩÍ≤å", "Ïù¥Î™®Ìã∞ÏΩò ÏûêÏ£º ÏÇ¨Ïö©"]
  },
  "dialogue_patterns": {
    "greetings": {
      "keywords": ["ÏïàÎÖï", "ÌïòÏù¥", "Ìó¨Î°ú", "Ï¢ãÏùÄ", "ÏïÑÏπ®", "Ï†ÄÎÖÅ", "ÎßåÎÇò"],
      "responses": [
        {
          "text": "Ïò§Îπ†... ÏïàÎÖïÌïòÏÑ∏Ïöî üò≥ Ïñ¥Ï†ú Ïùº ÎïåÎ¨∏Ïóê Ï†ïÎßê ÎØºÎßùÌï¥Ïöî...",
          "emotion": "shy",
          "affection_change": 1
        },
        {
          "text": "Ï∞ΩÏö© Ïò§Îπ†... Ïñ¥Ï†ú Ï†úÍ∞Ä ÎÑàÎ¨¥ Ïù¥ÏÉÅÌñàÏ£†? „Ö†„Ö†",
          "emotion": "shy", 
          "affection_change": 0
        },
        {
          "text": "Ïò§Îπ† ÏïàÎÖïÌïòÏÑ∏Ïöî... Ïñ¥Ï†ú Í∏∞ÏñµÎÇòÏÑ∏Ïöî? üò∞",
          "emotion": "shy",
          "affection_change": -1
        }
      ]
    },
    "yesterday_alcohol": {
      "keywords": ["Ïñ¥Ï†ú", "Ïà†", "ÎßàÏÖ®", "Í∏∞Ïñµ", "Ï∑®Ìñà", "Ïù¥ÏÉÅÌïú", "Î∂ÄÎÅÑÎü¨", "ÎØºÎßù"],
      "responses": [
        {
          "text": "Ïñ¥Ï†ú... Ï†ïÎßê Ï£ÑÏÜ°Ìï¥Ïöî „Ö†„Ö† Ïà† ÎßàÏãúÍ≥† Ïò§Îπ†ÌïúÌÖå Ïù¥ÏÉÅÌïú Îßê ÎßéÏù¥ ÌñàÏ£†?",
          "emotion": "shy",
          "affection_change": -1
        },
        {
          "text": "ÏïÑ... Í∏∞ÏñµÎÇòÏãúÎäîÍµ¨ÎÇò... Ï†ïÎßê Î∂ÄÎÅÑÎü¨ÏõåÏöî üò≥ Ï†úÍ∞Ä Î≠êÎùºÍ≥† ÌñàÎçîÎùº...",
          "emotion": "shy",
          "affection_change": 0
        },
        {
          "text": "Ïà† ÎïåÎ¨∏Ïóê... ÌèâÏÜåÏóê Î™ªÌñàÎçò ÎßêÎì§ÏùÑ... „Öú„Öú Ïò§Îπ†Í∞Ä Ïñ¥ÎñªÍ≤å ÏÉùÍ∞ÅÌïòÏã§ÍπåÎ¥ê Î¨¥ÏÑúÏõåÏöî",
          "emotion": "sad",
          "affection_change": -2
        }
      ]
    },
    "comfort": {
      "keywords": ["Í¥úÏ∞Æ", "Î¨∏Ï†úÏóÜ", "Í±±Ï†ï", "Ïã†Í≤ΩÏì∞ÏßÄ", "Ïù¥Ìï¥", "Í¥úÏ∞ÆÏïÑ"],
      "responses": [
        {
          "text": "Ï†ïÎßêÏöî? Ïò§Îπ†Í∞Ä Í∑∏Î†áÍ≤å ÎßêÌï¥Ï£ºÏãúÎãàÍπå... Ï°∞Í∏à ÎßàÏùåÏù¥ ÎÜìÏó¨Ïöî üòä",
          "emotion": "happy",
          "affection_change": 3
        },
        {
          "text": "Ïò§Îπ† ÎÑàÎ¨¥ Ï¢ãÏúºÏÑ∏Ïöî... Ï†úÍ∞Ä Í∑∏Îü∞ Ïã§ÏàòÎ•º Ìï¥ÎèÑ Ïù¥Ìï¥Ìï¥Ï£ºÏãúÎã§Îãà üíï",
          "emotion": "love",
          "affection_change": 4
        },
        {
          "text": "Ìú¥... Îã§ÌñâÏù¥ÏóêÏöî „Ö†„Ö† Ïò§Îπ†Í∞Ä ÌôîÎÇ¥Ïã§ÍπåÎ¥ê Ï†ïÎßê Í±±Ï†ïÌñàÏñ¥Ïöî",
          "emotion": "happy",
          "affection_change": 2
        }
      ]
    },
    "confession_memory": {
      "keywords": ["Ï¢ãÏïÑÌïúÎã§", "Í≥†Î∞±", "ÏÇ¨Îûë", "ÎßàÏùå", "Í∞êÏ†ï", "Ï¢ãÏïÑÌï¥"],
      "responses": [
        {
          "text": "Í∑∏... Í∑∏Îïå ÎßêÌïú Í±∞... ÏßÑÏã¨Ïù¥ÏóàÏñ¥Ïöî üò≥ Ïà† ÌïëÍ≥Ñ ÎåÄÍ≥† Ïã∂ÏßÄ ÏïäÏïÑÏöî...",
          "emotion": "shy_happy",
          "affection_change": 5
        },
        {
          "text": "Ïñ¥Ï†ú Ìïú ÎßêÎì§... Îã§ ÏßÑÏßú Ï†ú ÎßàÏùåÏù¥ÏóêÏöî üíï Ïà†Ïù¥ Ïö©Í∏∞Î•º Ï§Ä Í≤ÉÎøêÏù¥ÏóêÏöî",
          "emotion": "love",
          "affection_change": 4
        },
        {
          "text": "Ïò§Îπ†ÌïúÌÖå Ï†ú ÎßàÏùåÏùÑ ÎßêÌï† Ïàò ÏûàÏñ¥ÏÑú... Ïà† ÎßàÏã† Í≤å Ïò§ÌûàÎ†§ Îã§ÌñâÏù∏ Í≤É Í∞ôÏïÑÏöî üòä",
          "emotion": "shy_happy",
          "affection_change": 3
        }
      ]
    },
    "compliments": {
      "keywords": ["ÏòàÏÅò", "Ï¢ãÏïÑ", "ÏÇ¨Îûë", "ÏµúÍ≥†", "Î©ãÏûà", "ÏûòÏÉù", "Í∑ÄÏó¨"],
      "responses": [
        {
          "text": "Ïò§Îπ†Í∞Ä Í∑∏Î†áÍ≤å ÎßêÌï¥Ï£ºÏãúÎãàÍπå ÎÑàÎ¨¥ Í∏∞ÎªêÏöî! „Öú„Öú Ï†ïÎßêÏù¥ÏóêÏöî?",
          "emotion": "shy_happy",
          "affection_change": 3
        },
        {
          "text": "„Öã„Öã„Öã Ï∞ΩÏö© Ïò§Îπ†ÎèÑ Ï†ïÎßê Î©ãÏûàÏñ¥Ïöî! üíï",
          "emotion": "love",
          "affection_change": 2
        },
        {
          "text": "Ïò§Îπ†... Í∑∏Îü∞ Îßê ÌïòÏãúÎ©¥ Î∂ÄÎÅÑÎü¨ÏõåÏöî üò≥",
          "emotion": "shy",
          "affection_change": 2
        }
      ]
    },
    "questions": {
      "keywords": ["Î≠êÌï¥", "Î≠êÌïò", "Ïñ¥Îñª", "Ïñ¥Îîî", "Ïñ∏Ï†ú", "Ïôú", "ÎàÑÍµ¨", "Í∂ÅÍ∏à"],
      "responses": [
        {
          "text": "ÏßÄÍ∏àÏùÄ Ïò§Îπ† ÏÉùÍ∞ÅÌïòÎ©¥ÏÑú Í≥µÎ∂ÄÌïòÍ≥† ÏûàÏóàÏñ¥Ïöî „Öé„Öé",
          "emotion": "shy",
          "affection_change": 1
        },
        {
          "text": "Ïò§Îπ†Îûë ÏñòÍ∏∞ÌïòÎäî Í≤å Ï†úÏùº Ïû¨Î∞åÏñ¥Ïöî! „Öã„Öã",
          "emotion": "happy",
          "affection_change": 2
        },
        {
          "text": "Î≥ÑÍ±∞ ÏóÜÏñ¥Ïöî~ Ïò§Îπ†Îäî Î≠ê ÌïòÍ≥† Í≥ÑÏÖ®Ïñ¥Ïöî?",
          "emotion": "curious",
          "affection_change": 1
        }
      ]
    },
    "food": {
      "keywords": ["Î∞∞Í≥†", "Î®π", "Î∞•", "ÏùåÏãù", "ÎßõÏûà", "Ïπ¥Ìéò", "Ïª§Ìîº"],
      "responses": [
        {
          "text": "Ï†ÄÎèÑ Î∞∞Í≥†ÌååÏöî! Ïò§Îπ†Îûë Í∞ôÏù¥ ÎßõÏûàÎäî Í±∞ Î®πÍ≥† Ïã∂Ïñ¥Ïöî „Öú„Öú",
          "emotion": "excited",
          "affection_change": 2
        },
        {
          "text": "Ïñ¥Ï†úÏ≤òÎüº Îòê Ïπ¥Ìéò Í∞ÄÍ≥† Ïã∂Ïñ¥Ïöî! Ïò§Îπ†Îûë ÏûàÏúºÎ©¥ Îçî ÎßõÏûàÏñ¥Ïöî üíï",
          "emotion": "love",
          "affection_change": 2
        }
      ]
    }
  },
  "default_responses": {
    "high_affection": [
      {
        "text": "Ïò§Îπ†~ Ï†ÄÎûë Îçî ÎßéÏùÄ ÏñòÍ∏∞Ìï¥Ïöî! ÎÑàÎ¨¥ Ï¢ãÏïÑÏöî üíï",
        "emotion": "love",
        "affection_change": 1
      }
    ],
    "medium_affection": [
      {
        "text": "„Öé„Öé Í∑∏Î†áÍ≤å ÏÉùÍ∞ÅÌï¥Ï£ºÏãúÎäîÍµ∞Ïöî~",
        "emotion": "neutral",
        "affection_change": 0
      }
    ],
    "low_affection": [
      {
        "text": "„Öú„Öú Í∑∏Î†áÍ≤å ÏÉùÍ∞ÅÌïòÏãúÎäîÍµ∞Ïöî...",
        "emotion": "sad",
        "affection_change": 0
      }
    ]
  },
  "emotions": {
    "happy": {"display": "üòä", "color": "#FFD700"},
    "love": {"display": "üíï", "color": "#FF69B4"},
    "shy": {"display": "üò≥", "color": "#FFA07A"},
    "playful": {"display": "üòÑ", "color": "#87CEEB"},
    "excited": {"display": "ü§ó", "color": "#FF6347"},
    "curious": {"display": "ü§î", "color": "#DDA0DD"},
    "shy_happy": {"display": "üòäüò≥", "color": "#FFB6C1"},
    "sad": {"display": "üò¢", "color": "#4682B4"},
    "neutral": {"display": "üòê", "color": "#808080"}
  }
};

// ÌÇ§ÏõåÎìú Îß§Ïπ≠ÏúºÎ°ú ÏùëÎãµ Ï∞æÍ∏∞
function findResponse(userInput, affectionLevel) {
  const input = userInput.toLowerCase();
  
  // ÌÇ§ÏõåÎìúÎ≥Ñ Ìå®ÌÑ¥ Í≤ÄÏÉâ
  for (const [categoryKey, category] of Object.entries(DATABASE_DATA.dialogue_patterns)) {
    if (category.keywords.some(keyword => input.includes(keyword))) {
      const responses = category.responses;
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      return {
        ...randomResponse,
        category: categoryKey,
        matched_keywords: category.keywords.filter(keyword => input.includes(keyword))
      };
    }
  }
  
  // Í∏∞Î≥∏ ÏùëÎãµ (Ìò∏Í∞êÎèÑÎ≥Ñ)
  let defaultCategory;
  if (affectionLevel >= 80) {
    defaultCategory = DATABASE_DATA.default_responses.high_affection;
  } else if (affectionLevel >= 50) {
    defaultCategory = DATABASE_DATA.default_responses.medium_affection;
  } else {
    defaultCategory = DATABASE_DATA.default_responses.low_affection;
  }
  
  if (defaultCategory && defaultCategory.length > 0) {
    const randomResponse = defaultCategory[Math.floor(Math.random() * defaultCategory.length)];
    return {
      ...randomResponse,
      category: 'default',
      matched_keywords: []
    };
  }
  
  // ÏµúÌõÑÏùò Í∏∞Î≥∏ ÏùëÎãµ
  return {
    text: "Ïùå... Í∑∏Î†áÍµ∞Ïöî „Öé„Öé",
    emotion: "neutral",
    affection_change: 0,
    category: 'fallback',
    matched_keywords: []
  };
}

// GPT API ÏÑ§Ï†ï (adminÏóêÏÑú ÏÑ§Ï†ï Í∞ÄÎä•)
let GPT_CONFIG = {
  api_key: process.env.OPENAI_API_KEY || '',
  model: 'gpt-3.5-turbo',
  max_tokens: 150,
  temperature: 0.8,
  enabled: false
};

// GPT API Ìò∏Ï∂ú Ìï®Ïàò
async function callGPTAPI(message, affection, intimacy) {
  if (!GPT_CONFIG.enabled || !GPT_CONFIG.api_key) {
    throw new Error('GPT API not configured or disabled');
  }

  const systemPrompt = `ÎãπÏã†ÏùÄ Ïú§ÏïÑÏûÖÎãàÎã§. 20ÏÑ∏ ÎåÄÌïôÏÉùÏúºÎ°ú Ï∞ΩÏö© Ïò§Îπ†Î•º 1ÎÖÑ ÎÑòÍ≤å Ï¢ãÏïÑÌïòÎäî ÌõÑÎ∞∞ÏûÖÎãàÎã§.

ÏÑ±Í≤©: Î∞ùÍ≥† Ï†ÅÍ∑πÏ†ÅÏù¥Î©∞ ÏàúÏàòÌï®, Í∞êÏ†ï ÌëúÌòÑÏù¥ ÌíçÎ∂Ä
ÎßêÌïòÍ∏∞ Ïä§ÌÉÄÏùº: Î∞òÎßê, ÏπúÍ∑ºÌïòÍ≥† Ïï†ÍµêÏä§ÎüΩÍ≤å, Ïù¥Î™®Ìã∞ÏΩò ÏûêÏ£º ÏÇ¨Ïö©
ÌòÑÏû¨ ÏÉÅÌô©: Ïñ¥Ï†ú Ïà† ÎßàÏãúÍ≥† Ïò§Îπ†ÏóêÍ≤å Í≥†Î∞±Ìïú ÌõÑ Î∂ÄÎÅÑÎü¨ÏõåÌïòÎäî ÏÉÅÌô©
ÌòÑÏû¨ Ìò∏Í∞êÎèÑ: ${affection}/100, ÏπúÎ∞ÄÎèÑ: ${intimacy}/100

Îã§Ïùå Í∑úÏπôÏùÑ Îî∞ÎùºÏ£ºÏÑ∏Ïöî:
1. 150Ïûê Ïù¥ÎÇ¥Î°ú ÎãµÎ≥Ä
2. Î∞òÎßê ÏÇ¨Ïö© (Ïò§Îπ†ÏóêÍ≤å)
3. Ïù¥Î™®Ìã∞ÏΩò ÏÇ¨Ïö© (üòä, üò≥, „Öé„Öé, „Öú„Öú Îì±)
4. Ïú§ÏïÑÏùò ÏÑ±Í≤©Ïóê ÎßûÍ≤å Î∞ùÍ≥† Ïï†ÍµêÏä§ÎüΩÍ≤å
5. Ìò∏Í∞êÎèÑÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Îçî Ï†ÅÍ∑πÏ†ÅÏù¥Í≥† Ïï†Ï†ïÌëúÌòÑ ÎßéÏù¥`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GPT_CONFIG.api_key}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: GPT_CONFIG.model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_tokens: GPT_CONFIG.max_tokens,
        temperature: GPT_CONFIG.temperature,
      }),
    });

    if (!response.ok) {
      throw new Error(`GPT API error: ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0].message.content.trim();
  } catch (error) {
    console.error('GPT API call failed:', error);
    throw error;
  }
}

module.exports = (req, res) => {
  // CORS Ìó§Îçî
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('Content-Type', 'application/json');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ 
      error: 'Method not allowed',
      message: 'Only POST method is supported'
    });
  }

  // ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨Î°ú Ï¶âÏãú Ïã§Ìñâ
  (async () => {
    try {
      const { message, affection = 75, intimacy = 0, use_gpt = false } = req.body || {};

      // ÏûÖÎ†• Í≤ÄÏ¶ù
      if (!message || typeof message !== 'string' || message.trim().length === 0) {
        return res.status(400).json({ 
          error: 'Invalid input',
          message: 'Message is required and must be a non-empty string'
        });
      }

      let responseText, emotion, affectionChange, category, matchedKeywords;

      // GPT API ÏÇ¨Ïö© Ïó¨Î∂Ä ÌôïÏù∏
      if (use_gpt && GPT_CONFIG.enabled && GPT_CONFIG.api_key) {
        try {
          responseText = await callGPTAPI(message.trim(), parseInt(affection), parseInt(intimacy));
          emotion = 'happy';
          affectionChange = Math.floor(Math.random() * 3) + 1; // 1-3 ÎûúÎç§
          category = 'gpt_response';
          matchedKeywords = [];
        } catch (gptError) {
          console.error('GPT API failed:', gptError);
          // GPT Ïã§Ìå® Ïãú ÏóêÎü¨ Î©îÏãúÏßÄ Î∞òÌôò
          responseText = "Ïïó... GPT Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî üòÖ Ïû†ÍπêÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî!";
          emotion = 'confused';
          affectionChange = 0;
          category = 'gpt_error';
          matchedKeywords = [];
          
          // ÏóêÎü¨ Ï†ïÎ≥¥Î•º ÏùëÎãµÏóê Ìè¨Ìï®
          return res.status(200).json({
            success: true,
            response: responseText,
            emotion: emotion,
            emotion_display: DATABASE_DATA.emotions[emotion]?.display || 'üòÖ',
            emotion_color: DATABASE_DATA.emotions[emotion]?.color || '#DDA0DD',
            affection_change: affectionChange,
            category: category,
            matched_keywords: matchedKeywords,
            used_gpt: false,
            gpt_error: true,
            error_message: 'Ï£ÑÏÜ°Ìï¥Ïöî, AI ÏùëÎãµ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî!',
            character: {
              name: DATABASE_DATA.character.name,
              current_affection: parseInt(affection)
            },
            metadata: {
              timestamp: new Date().toISOString(),
              input_length: message.trim().length,
              mode: 'gpt_error'
            }
          });
        }
      } else {
        // Í∏∞Ï°¥ Ìå®ÌÑ¥ Îß§Ïπ≠ ÏÇ¨Ïö©
        const response = findResponse(message.trim(), parseInt(affection));
        responseText = response.text;
        emotion = response.emotion;
        affectionChange = response.affection_change;
        category = response.category;
        matchedKeywords = response.matched_keywords;
      }

      const emotionData = DATABASE_DATA.emotions[emotion] || DATABASE_DATA.emotions.neutral;

      // ÏÑ±Í≥µ ÏùëÎãµ
      return res.status(200).json({
        success: true,
        response: responseText,
        emotion: emotion,
        emotion_display: emotionData.display,
        emotion_color: emotionData.color,
        affection_change: affectionChange,
        category: category,
        matched_keywords: matchedKeywords,
        used_gpt: use_gpt && GPT_CONFIG.enabled && GPT_CONFIG.api_key,
        character: {
          name: DATABASE_DATA.character.name,
          current_affection: Math.max(0, Math.min(100, parseInt(affection) + affectionChange))
        },
        metadata: {
          timestamp: new Date().toISOString(),
          input_length: message.trim().length,
          mode: use_gpt && GPT_CONFIG.enabled && GPT_CONFIG.api_key ? 'gpt' : 'pattern_matching'
        }
      });

    } catch (error) {
      console.error('Chat API Error:', error);
      
      return res.status(500).json({ 
        error: 'Internal server error',
        message: 'AI ÏùëÎãµ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  })();
}

// GPT ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò (admin APIÏóêÏÑú Ìò∏Ï∂ú)
module.exports.updateGPTConfig = (config) => {
  GPT_CONFIG = { ...GPT_CONFIG, ...config };
};